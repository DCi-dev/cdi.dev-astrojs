---
import { Icon } from "astro-icon";
export interface Props extends astroHTML.JSX.AnchorHTMLAttributes {}
const { props, display } = Astro.props;
const style = display;
---

<div
x-data="{ shown: false }" x-intersect="shown = true"
  class="!w-full selection:bg-neutral-300 dark:text-neutral-200 dark:selection:bg-neutral-900 dark:selection:text-neutral-400"
>
  <h2 x-show="shown" x-transition:enter="motion-safe:animate-slide-left" class="mb-4 font-ubuntu text-2xl font-bold sm:text-3xl motion-safe:animate-slide-left">
    {props.title}
  </h2>

  <div class={`cards ${style} mt-5 grid gap-2`}>
    {
      props.data.map((item: { url: string; name: unknown; description: string; icon: any; }) => {
        return (
          <a
            href={item.url}
            rel="noopener noreferrer"
            target="_blank"
            title={item.name + " - " + item.description}
            class="card relative flex h-28  flex-col items-center justify-center gap-3 rounded-md border border-transparent bg-neutral-100 p-8 text-neutral-900  shadow  transition-all hover:z-10 hover:origin-center  hover:text-neutral-1000 hover:shadow-lg active:!scale-105 dark:bg-neutral-1000 dark:text-neutral-200 dark:shadow-md  dark:hover:text-neutral-100 lg:hover:!scale-110"
          >
            <div class="card-content flex flex-col items-center justify-center">
              <Icon name={item.icon} size="2.5em" />
              <p class="absolute bottom-3 pt-3 select-none text-sm font-opensans">
                {item.name}
              </p>
            </div>
          </a>
        );
      })
    }
  </div>
</div>

<script>
  for (const cards of document.getElementsByClassName("cards")) {
    cards.addEventListener("mousemove", (e) => {
      for (const card of document.getElementsByClassName("card")) {
        const rect = card.getBoundingClientRect(),
          x = e.clientX - rect.left,
          y = e.clientY - rect.top;
        const c = card as HTMLElement;
        c.style.setProperty("--mouse-x", `${x}px`);
        c.style.setProperty("--mouse-y", `${y}px`);
      }
    });
  }
</script>
