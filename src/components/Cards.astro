---
export interface Props extends astroHTML.JSX.AnchorHTMLAttributes {}
const { props, display} = Astro.props;
const style = display

---


<div class="!w-full  selection:bg-neutral-300 dark:text-neutral-200 dark:selection:bg-blue-900 dark:selection:text-neutral-400"
    >
      <h2
        class="mb-4 font-ubuntu text-2xl font-bold sm:text-3xl"
      >
        {props.title}
      </h2>

      <div
        class={`cards ${style} mt-5 grid gap-6`}
      >
        {props.data.map((item) => {
          return (
            <a key={item.name} href={item.url} rel="noopener noreferrer" target="_blank">
              <div
                title={item.name + " - " + item.description}
                class="card relative flex h-28  flex-col items-center justify-center gap-3 rounded-md border border-transparent bg-neutral-100 p-8 text-neutral-900  shadow  transition-all hover:z-10 hover:origin-center hover:border-neutral-400 hover:text-neutral-1000 hover:shadow-lg active:!scale-90 dark:bg-neutral-1000 dark:text-neutral-200 dark:shadow-md dark:hover:border-neutral-600 dark:hover:text-neutral-100 lg:hover:!scale-125"
              >
                <div class="card-content flex flex-col items-center justify-center">
                  <item.Icon size='2em'/>
                  <p class="absolute bottom-3 select-none text-sm">
                    {item.name}
                  </p>
                </div>
              </div>
            </a>
          );
        })}
      </div>
    </div>


    <script>
      const handleOnMouseMove = e => {
        const {currentTarget: target} = e;
        const rect = target.getBoundingClientRect(),
          x = e.clientX - rect.left,
          y = e.clientY - rect.top;
          target.style.setProperty("--mouse-x", `${x}px`);
          target.style.setProperty("--mouse-y", `${y}px`);
      }

      for(const card of document.querySelectorAll(".card")) {
        card.addEventListener("mousemove", handleOnMouseMove);
      }
    </script>